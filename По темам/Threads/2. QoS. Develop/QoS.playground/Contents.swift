import UIKit

var lesson2 = "Quality of service" + ("Качество обслуживания")

var pthread = pthread_t(bitPattern: 0) //
/*
 pthread_t - это тип данных для идентификатора потока в POSIX Threads, а bitPattern: 0 указывает на начальное значение идентификатора, равное 0. Начальное значение идентификатора потока представляет собой базовое значение, с которого начинается нумерация потоков.
 */
var atribut = pthread_attr_t() // переменная типа pthread_attr_t используется для управления атрибутами потока.

pthread_attr_init(&atribut) // принимаем указатель на переменную atribut и инициализирует ее с атрибутами по умолчанию.
pthread_attr_set_qos_class_np(&atribut, QOS_CLASS_USER_INITIATED, 0) // класс качества обслуживания потока
/*
 Класс качества обслуживания (Quality of Service, QoS) потока определяет уровень приоритета и характеристики выполнения потока в многозадачной среде. Он позволяет операционной системе управлять потоками и распределять ресурсы процессора таким образом, чтобы потоки с более высоким приоритетом получали больше выделенного времени для выполнения.
 Он принимает три аргумента:
 Указатель на атрибуты потока.
 Класс качества обслуживания (QoS class), который указывает на приоритет и характеристики выполнения потока. В вашем коде используется QOS_CLASS_USER_INITIATED, что означает, что поток должен быть выполнен как пользовательский инициированный поток, что обычно означает средний или высокий приоритет выполнения.
 Относительный приоритет потока. В вашем коде он установлен в 0, что означает, что не задается дополнительный приоритет.
 */
pthread_create(&pthread, &atribut, { _ -> UnsafeMutableRawPointer? in // новый поток
    /*
     &pthread Указатель на переменную, в которую будет сохранен идентификатор созданного потока.
     &atribut Указатель на переменную с атрибутами потока.
     */
    print("Тест")
    pthread_set_qos_class_self_np(QOS_CLASS_BACKGROUND, 0) // изменение уровня приоритетности выполнения кода в качестве обслуживания
    return nil
}, nil)

// QOS_CLASS_USER_INTERACTIVE - необходим, когда пользователь прямо сейчас взаимодействует с UIView (например, рисует)
// QOS_CLASS_USER_INITIATED - когда результат должен быть предоставлен в ближайшее время (например, загрузка изображения)
// QOS_CLASS_USER_DEFAULT - когда пользователь готов ожидать резульата (например, загрузка приложения)
// QOS_CLASS_USER_UTILITY - работа в фоновом режиме (например, очистка кеша)
// QOS_CLASS_USER_BACKGRAUND - нет точного времени выполнения задачи

let nsThread = Thread {
    print("Тест")
    print(qos_class_self())
}

nsThread.qualityOfService = .userInteractive
nsThread.start()

print(qos_class_main())
