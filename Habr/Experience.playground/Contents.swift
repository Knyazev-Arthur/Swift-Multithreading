import UIKit
import PlaygroundSupport
PlaygroundPage.current.needsIndefiniteExecution = true



// MARK: Experience 1. –ó–∞–¥–∞—á–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
let mainQueue = DispatchQueue.main // –≥–ª–∞–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (QoS), –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—é—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å
let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive)
let userQueue = DispatchQueue.global(qos: .userInitiated)
let utilityQueue = DispatchQueue.global(qos:  .utility)
let backgroundQueue = DispatchQueue.global(qos:  .background)
let defaultQueue = DispatchQueue.global() // qos: .default –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –§—É–Ω–∫—Ü–∏—è qos_class_self() –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∞—Å—Å QoS, –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ–µ —Å —Ç–µ–∫—É—â–∏–º –ø–æ—Ç–æ–∫–æ–º.
// –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–ø—Ä–æ—Ä–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫.
func task(_ symbol: String) { for i in 1...6 {
    print("\(symbol) \(i) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
    }
}

func taskHIGH(_ symbol: String) {
    print("\(symbol) HIGH –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = \(qos_class_self().rawValue)")
}

//task("Hello")
//taskHIGH("A")



// MARK: Experience 2. Sync Async
/*
print("---------------------------------------------------")
print("   –°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync ")
print("   Global .concurrent Q1 - .userInitiated ")
print("---------------------------------------------------")
userQueue.sync { task("üòÄ") }
task("üëø")
sleep (2)

print("---------------------------------------------------")
print("   –ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async ")
print("   Global .concurrent Q1 - .userInitiated ")
print("---------------------------------------------------")
userQueue.async {task("üòÄ")}
task("üëø")
*/


// MARK: Experience 3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
// –ø—Ä–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º –≤—ã–∑–æ–≤–µ –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä mySerialQueue –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π label, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏
let mySerialQueue = DispatchQueue(label: "com.bestkora.mySerial") // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—á–µ—Ä–µ–¥—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π
/*
print("---------------------------------------------------")
print("   –°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ sync ")
print("   Private .serial Q1 - no ")
print("---------------------------------------------------")

mySerialQueue.sync { task("üòÄ")}
task("üëø")

print("---------------------------------------------------")
print("   –ê–°–ò–ù–•–†–û–ù–ù–û–°–¢–¨ async ")
print("   Private .serial Q1 - no ")
print("---------------------------------------------------")
 
// –ú–µ—Ç–æ–¥ async –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –û–¥–Ω–∞–∫–æ, –∑–∞–¥–∞—á–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –æ–¥–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∏—Ö –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
mySerialQueue.async { task("üòÄ")}
task("üëø")
*/

 

// MARK: Experience 4. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º QoS
/*
print("---------------------------------------------------")
print("   Private .serial Q1 - .userInitiated ")
print("---------------------------------------------------")

let serialPriorityQueue = DispatchQueue(label: "com.bestkora.serialPriority", qos : .userInitiated)

// serialPriorityQueue —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π, –∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async –º–µ—Ç–æ–¥–∞, –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
serialPriorityQueue.async { task("üòÄ") }
serialPriorityQueue.async { task("üëø") }
sleep(1)
 */



// MARK: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å —Ä–∞–∑–Ω—ã–º–∏ QoS
/*
print("---------------------------------------------------")
print("   Private .serial Q1 - .userInitiated")
print("                   Q2 - .background ")
print("---------------------------------------------------")

// –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º QoS –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–∞—â–µ
let serialPriorityQueue1 = DispatchQueue(label: "com.bestkora.serialPriority", qos : .userInitiated)
let serialPriorityQueue2 = DispatchQueue(label: "com.bestkora.serialPriority", qos : .background)
serialPriorityQueue2.async { task("üòÄ") }
serialPriorityQueue1.async { task("üëø") }
sleep(1)
*/



// MARK: asyncAfter c –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
/*
print("---------------------------------------------------")
print("   asynAfter (.userInteractiv) –Ω–∞ Q2")
print("   Private .serial Q1 - .utility")
print("                   Q2 - .background")
print("---------------------------------------------------")

let serialUtilityQueue = DispatchQueue(label: "com.bestkora.serialUtilityriority", qos : .utility)
let serialBackgroundQueue = DispatchQueue(label: "com.bestkora.serialBackgroundPriority", qos : .background)

// asyncAfter –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∏–∑–º–µ–Ω–∏—Ç—å QoS –∏ –∑–∞–¥–µ—Ä–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª—é–±–æ–π –æ—á–µ—Ä–µ–¥–∏ DispatchQueue –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
serialBackgroundQueue.asyncAfter (deadline: .now() + 0.1, qos: .userInteractive) { task("üëø") }
serialUtilityQueue.async { task("üòÄ") }
sleep (1)
 */




// MARK: Experience 5. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å

// MARK: highPriorityItem = DispatchWorkItem
/*
//let highPriorityItem = DispatchWorkItem(qos: .userInteractive, flags:[.enforceQoS, .assignCurrentContext]) {
let highPriorityItem = DispatchWorkItem (qos: .userInteractive, flags:[.enforceQoS]){
    taskHIGH("üå∫")
}

print("---------------------------------------------------")
print(" Private  .concurrent Q - .userInitiated ")
print("---------------------------------------------------")

let workerQueue = DispatchQueue(label: "com.bestkora.worker_concurrent", qos: .userInitiated, attributes: .concurrent)
workerQueue.async  { task("üòÄ") }
workerQueue.async {task("üëø") } // —É–∫–∞–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –±—É–¥—É—á–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π 2-–æ–π, –∏–Ω–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ 1-–æ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä–∞–ª-–æ–º –ø–æ—Ç–æ–∫–µ
sleep (2)
 */



// MARK: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ c —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
/*
print("---------------------------------------------------")
print("    .concurrent Q1 - .userInitiated ")
print("                Q2 - .background ")
print("---------------------------------------------------")

// –∏–∑ 2-—É—Ö –ø–∞—Ä–∞–ª-—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ü–∏–π –±—ã—Å—Ç—Ä–µ–µ –±—É–¥—É—Ç –≤ —Ç–æ–π, —á–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ
let workerQueue1 = DispatchQueue(label: "com.bestkora.worker_concurrent1",  qos: .userInitiated, attributes: .concurrent)
let workerQueue2 = DispatchQueue(label: "com.bestkora.worker_concurrent1",  qos: .background, attributes: .concurrent)

workerQueue2.async  {task("üòÄ")}
workerQueue1.async {task("üëø")}
//workerQueue1.async(execute: highPriorityItem)
//workerQueue2.async(execute: highPriorityItem)
sleep (1)
 */



// MARK: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ c –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
/*
print("---------------------------------------------------")
print(" –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å c –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print(" Private  .concurrent Q - .userInitiated, .initiallyInactive")
print("---------------------------------------------------")

// –§–ª–∞–≥ initiallyInactive –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
let workerDelayQueue = DispatchQueue(label: "com.bestkora.worker_concurrent", qos: .userInitiated, attributes: [.concurrent, .initiallyInactive])
workerDelayQueue.async  {task("üòÄ")}
workerDelayQueue.async {task("üëø")}
sleep (3)
print("---------------------------------------------------")
print(" –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
print(" —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
print("---------------------------------------------------")
workerDelayQueue.activate()
sleep (1)
 */


// MARK: Experience 6. DispatchWorkItem
let highPriorityItem = DispatchWorkItem (qos: .userInteractive, flags:[.enforceQoS]) {
    taskHIGH("üå∫")
}
